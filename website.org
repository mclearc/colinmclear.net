#+TITLE: Personal Website
#+DATE: July 17, 2018
#+AUTHOR: Colin McLear

* Website
** Pages
:PROPERTIES:
:EXPORT_HUGO_SECTION: ./
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :author false :toc false
:END:
#+LANGUAGE: en
#+OPTIONS: ':t

*** Welcome!
:PROPERTIES:
:EXPORT_FILE_NAME: home
:END:

I am an Associate Professor in the [[http://www.unl.edu/philosophy/][Department of Philosophy]] at the University
of Nebraska-Lincoln. My work focuses on two (often intersecting) areas of
philosophy -- the History of Modern Philosophy (especially Kant) and the
Philosophy of Mind. Here you'll find links to my [[/research][research]] and [[/teaching][teaching]], as
well as the occasional [[/posts][blog post]]. 

If you're interested, here's my complete CV: [[file:/materials/McLearCV.pdf][PDF]] | [[file:/materials/McLearCV.html][HTML]].

*** Research
:PROPERTIES:
:EXPORT_FILE_NAME: research
:EXPORT_HUGO_WEIGHT: -100
:EXPORT_HUGO_MENU: :menu main
:END:

I have broad interests in epistemology, metaphysics, the philosophy of mind, and the
foundations of cognitive science. I pursue these interests historically, by querying
the European philosophical tradition from the seventeenth through the nineteenth
centuries. The focus of my work thus far has been Immanuel Kant's philosophy,
particularly his views on the nature of the mind and the forms of its manifestation,
both rational and non-rational, in animal life. I have written on Kant's views
concerning the mind, perception, his theory of human reason and rationality, and the
broader metaphysical and epistemological views with which these ideas are integrated.
I'm also very interested in seeing what, if any, connections may be made between
Kant's positions and contemporary research programs in the philosophy of mind and
metaphysics. In particular, I am interested in issues pertaining to the study of
mental content, the nature and significance of self-consciousness, reasoning and
rationality, and animal cognition.

#+HTML:<style> .xpapers_abstract { font-size:smaller; padding-left:6px; padding-bottom:10px } .xpapers_pubtype {font-size:28px} .publication-title {font-weight:regular } .publication-cite { color : #444 } </style>

#+HTML: <script id='ppl-widget' type="text/javascript" src="https://philpeople.org/widget/colin-mclear.js?app=philpapers&amp;iframe=true"></script>

**** Work in Progress 

If you're interested in a draft of any of the following please [[mailto:mclear@unl.edu][email me]].

- Kant on Rational Agency (book manuscript)
- "Actuality and intuition"
- "Reflection and reasoning"
- "The unity of reflection"
- "Definition and essence in the /Metaphysical Foundations of Natural Science/" 
# - "Hegel on the subjective nature of kantian thought"

**** Upcoming Conferences & Presentations 
- October 2021. "TBA." Colloquium, Department of Philosophy, University of Wisconsin--Madison.
- October 2021. "Self-Consciousness & Rationality." Kantian Rationality Lab,
  Kaliningrad. 
- May 2021. "Self-Consciousness & Rationality." Conference on Kant on the Self, Princeton University. 
- February 2020. "On Pure Intuition and Actuality." /Central division of the American
  Philosophical Association/, Chicago IL.
- December 2019. "Rationality: What Difference Does It Make?" Boston Area Kant Colloquium, Boston, MA.
- June 2019. "Self-Consciousness and the Freedom of Thought." China Kant Society, Peking University.
  Beijing, China.
- February 2019. Author Meets Critics Session on Melissa Merritt, /Kant on
  Reflection and Virtue/. Meeting of the Central Division of the APA. Denver, CO.
- November 2018. "On the Freedom of the Intellect." University of Nebraska–Omaha. Omaha, NE. 
  
  

*** Teaching
:PROPERTIES:
:EXPORT_FILE_NAME: teaching
:EXPORT_HUGO_WEIGHT: -50
:EXPORT_HUGO_MENU: :menu main
:END:

I regularly teach the The Philosophy of Food ([[http://phil105.colinmclear.net][PHIL 105]]), Introduction to Philosophy
([[file:/materials/course-syllabi/phil101-syllabus.pdf][PHIL 101]]), an undergraduate survey of 'modern' philosophy of the seventeenth and
eighteenth centuries ([[file:/materials/course-syllabi/phil232-syllabus.pdf][PHIL 232]]), and undergraduate and graduate level courses on
Early Modern ([[file:/materials/course-syllabi/kant-modern-syllabus.pdf][PHIL 460​/860]]), Kant ([[https://phil871.colinmclear.net][PHIL 471​/871]]), German Idealism ([[https://phil880.colinmclear.net][PHIL 480/880]]), and
a regular research seminar on related topics ([[https://phil971.colinmclear.net][PHIL 971]]).

**** Previously Taught
- PHIL 232 (Yearly): History of Early Modern Philosophy
- PHIL 105 (Yearly): [[http://phil105.colinmclear.net][The Philosophy of Food]]
- PHIL 101 (Yearly): Introduction to Philosophy
- PHIL 971 (Fall 2020): Kantian Conceptions of Rational Agency
- PHIL 971 (Fall 2017): [[file:/materials/course-syllabi/SK-german-idealism-syllabus.pdf][Self-Knowledge in Kant & Early German Idealism]]
- PHIL 971 (Spring 2016): [[file:/materials/course-syllabi/ISKSyllabus.pdf][Introspection & Self-Knowledge]]
- PHIL 971 (Fall 2013): [[file:/materials/course-syllabi/ConceptualismSyllabus.pdf][Seminar on Conceptualism]]
- PHIL 460​/860 (Fall 2016): [[file:/materials/course-syllabi/kant-modern-syllabus.pdf][Kant & Early Modern Philosophy]]
- Oxford Grad Seminar (Trinity 2017) on [[file:/materials/course-syllabi/ox-kant-syllabus.pdf][Kant on Perception and Cognition]], with [[http://www.anilgomes.com][Anil Gomes]]
  

*** Resources
:PROPERTIES:
:EXPORT_FILE_NAME: resources
:EXPORT_HUGO_WEIGHT: 0
:EXPORT_HUGO_MENU: :menu main
:END:

Here I collect links for research, teaching, technology, and whatever else might be useful.

**** Philosophy Links
- [[http://plato.stanford.edu][Stanford Encyclopedia of Philosophy]]
- [[http://www.iep.utm.edu/][Internet Encyclopedia of Philosophy]]
- [[http://philpapers.org][PhilPapers]]
  
**** Reading & Writing Philosophy
- [[http://www.jimpryor.net/teaching/vocab/index.html][Philosophical Terms & Methods]]
- [[http://www.jimpryor.net][Jim Pryor's]] guides to [[http://www.jimpryor.net/teaching/guidelines/reading.html][reading]] and [[http://www.jimpryor.net/teaching/guidelines/writing.html][writing]] philosophy
- [[http://philosophy.hku.hk/think/][Critical Thinking]]
- [[http://owl.english.purdue.edu/owl/][Purdue Online Writing Lab]] 
- [[http://writingproject.fas.harvard.edu/files/hwp/files/philosophical_writing.pdf][A Guide to Philosophical Writing]]
- [[https://www.dropbox.com/s/lyods0bt22x8u6l/ThesisOverview.pdf?dl=0][Writing a Thesis Statement]]
- [[https://www.dropbox.com/s/eaggc570nfu6nqa/PaperStructure.pdf?dl=0][Philosophy Paper Structure]]

**** Early Modern Resources
- [[https://projectvox.library.duke.edu][Project Vox]]
- [[http://publish.uwo.ca/~cdyck5/UWOKRG/digitalarchive.html][Digital Archive of 18th Century German Texts]] (UWO Kant Research Group)
- [[http://publish.uwo.ca/~cdyck5/UWOKRG/women.html][Women Intellectuals of 18th Century Germany]] (UWO Kant Research Group)
- [[https://historyofwomenphilosophers.org/ecc/#hwps][Encyclopedia of Concise Concepts by Women Philosophers]] (Mary Ellen Waithe & Ruth Hagengruber)
- [[http://www.unicaen.fr/puc/sources/prodescartes/accueil][Corpus Descartes]]
- [[http://digitalcavendish.org/text-archive/links-to-digital-texts/][Digital Cavendish Project]]
- [[http://www.gwlb.de/Leibniz/][Gottfried Wilhelm Leibniz Bibliothek]]
- [[http://emps.me/bryce/resources-for-philosophers/christian-wolff/][Christian Wolff]] (Bryce Gessell)
- [[http://www.kuttaka.org/~JHL/Main.html][Johann Heinrich Lambert Collected Works Online]] (Maarten Bullynck)

**** Kant Related Links
- [[http://kantpapers.org][KantPapers]]
- [[http://www.manchester.edu/kant/Home/index.htm][Kant in the Classroom]] (Steve Naragon)
- [[http://staffweb.hkbu.edu.hk/ppp/Kant.html][Kant on the Web]] (Steve Palmquist)
- [[http://publish.uwo.ca/~cdyck5/UWOKRG/kantsbooks.html][Kant's Books]] (UWO Kant Research Group)
- [[https://dspace.ut.ee/handle/10062/42108][Kants Handexemplar von Meiers Auszug aus der Vernunftlehre]] (University of Tartu)
- [[https://www.philosophie.fb05.uni-mainz.de/forschungsstellen-und-weitere-einrichtungen/fs_kant/][Kant-Forschungsstelle]]
- [[http://earlymoderntexts.com][Early Modern Philosophy Texts]]
- [[https://korpora.zim.uni-duisburg-essen.de/Kant/verzeichnisse-gesamt.html][Kant Akademieausgabe (Courtesy of Universität Duisburg-Essen)]]
- [[http://knb.mpiwg-berlin.mpg.de/kant/home][Database of Kant's concepts for a theory of nature]]

**** Sources for online German texts
- [[http://gso.gbv.de/DB=1.28/SET=1/TTL=1/][VD17]]
- [[http://www.zvdd.de/startseite/][ZVDD]]
- [[http://kvk.bibliothek.kit.edu/?digitalOnly=0&embedFulltitle=0&newTab=0][KVK]]
- [[http://digital-beta.staatsbibliothek-berlin.de][Digitalisierte Sammlungen (Berlin)]]
- [[https://www.deutsche-digitale-bibliothek.de][Deutsche Digitale Bibliothek]]

**** Academic Technology & Tools

Links to tools I use for research and writing

- [[http://daringfireball.net/projects/markdown/][Markdown]]: Plaintext markup for easy writing
- [[http://johnmacfarlane.net/pandoc/index.html][Pandoc]]: File conversion
- [[https://www.gnu.org/software/emacs/][Emacs]]: A superb (and free) text editor and writing/research platform
   - If you want to get started with emacs you might take a look at my
     [[https://github.com/mclear-tools/dotemacs][emacs configuration files]]
- [[http://bibdesk.sourceforge.net][BibDesk]]: Reference manager for bib files (Free, Mac OS only)
- [[https://www.sonnysoftware.com][Bookends]]: A fantastic general reference manager (Mac OS only)
- [[https://www.devontechnologies.com][Devonthink]]: Database & smart document manager (Mac OS only)
- [[http://skim-app.sourceforge.net][Skim]]: PDF reader & annotator (Free, Mac OS only)
- [[https://www.zotero.org][Zotero]]: A great free way to collect and manage references. Works well with bibtex via [[https://github.com/retorquere/zotero-better-bibtex][zotero better bibtex]]
- [[http://git-scm.com][Git]]: Version control
- [[https://education.github.com][Github]]: Online storage and collaboration
- Kieran Healy's [[http://kieranhealy.org/resources/][writing resources page]]
- [[http://profhacker.com][Profhacker]]: Blog on teaching & technology
- [[http://programminghistorian.org][The Programming Historian]]: Tutorials for aspiring digital humanists
*** Contact
:PROPERTIES:
:EXPORT_FILE_NAME: contact
:EXPORT_HUGO_MENU: :menu main
:EXPORT_HUGO_WEIGHT: 10
:END:

Dr. Colin McLear\\
Office: 315P Louise Pound Hall\\
Office Hours: (Remote only) T/Th 1–2:00 p.m. or by appointment. ([[https://unl.zoom.us/j/94199866851][Zoom link]])\\
Email: [[mailto:mclear@unl.edu][mclear@unl.edu]] \\ 
Phone: (402) 472-2425 \\

Email is the best way to reach me. I answer emails as soon as I can, but
primarily only on /weekdays/. 

  

** Blog
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc false :type post
:END:
#+LANGUAGE: en
#+OPTIONS: ':t

*** DONE Moving to Hugo :hugo:pelican:website:
CLOSED: [2018-07-19 Thu 10:49]
:PROPERTIES:
:EXPORT_FILE_NAME: moving-to-hugo
:END:

Another summer, another excuse to tinker with my website. I've used [[https://blog.getpelican.com][pelican]], a
python [[https://en.wikipedia.org/wiki/Web_template_system#Static_site_generators][static site generator]], to run this website for nearly six years. It's a
great tool. But I dislike python [[https://en.wikipedia.org/wiki/Dependency_hell][dependency hell]], and pelican is a bit slow.
So I've looked elsewhere. [[https://gohugo.io][Hugo]] is blazing fast, has a thriving community,
decent templates, and a downloadable binary that you can get via [[https://brew.sh][homebrew]]. No
more dependency management! Also important for me (as an [[https://www.gnu.org/software/emacs/][emacs]] user), there is
a great [[https://orgmode.org][org-mode]] exporter---[[https://ox-hugo.netlify.com][ox-hugo]]---that lets me easily generate the web
content from an org-file. On the whole I've been very happy with the move.

I've also changed hosting from github to [[https://netlify.com][Netlify]], which provides dead-simple
hosting. All you do is point it at a git repository (which remains on [[https://github.com/mclearc][Github]])
and tell it what commands to run and it provides continuous deployment. So
whenever I make a change to the site and push that change to [[https://github.com/mclearc/colinmclear.net][my repository]] on
Github Netlify automatically regenerates the site. Very cool. Plus, easy https
for a more secure site. 



*** DONE Maintaining a CV in Multiple Formats :cv:pandoc:geekery:
:PROPERTIES:
:EXPORT_DATE: 2015-12-14
:EXPORT_FILE_NAME: maintaining-cv-multiple-formats
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /2015/maintaining-a-cv-in-multiple-formats :type post :toc false
:END:

Suppose you want to keep a CV accessible in PDF, html, and perhaps other
formats (e.g. docx). It's a pain to do them all individually and keep them in
sync. Here's one way to avoid that issue, though it has a bit of initial work
involved in setting everything up. What you want to do is keep your CV (or
really anything of that ilk that you want to have available in multiple
formats) in a [[https://en.wikipedia.org/wiki/YAML][YAML]] file and then use
[[http://pandoc.org][pandoc]] to convert the YAML file into whatever documents
you need. I got the idea from looking at
[[https://github.com/mrzool/cv-boilerplate][this template]] on Github.

What you want to do is keep the CV info in a YAML file like so:

#+BEGIN_EXAMPLE
    name: Immanuel Kant
    address: Königsberg, Prussia
    email: manny@copernicanrevolution.edu

    AOS:
    - Aesthetics, Epistemology, Ethics, Metaphysics, Philosophy of Mind, Political Philosophy

    AOC:
    - German Idealism, Philosophy of Religion

    experience:
    - years: 1770-1804
      employer: University of Königsberg
      job: Chair of Logic and Metaphysics
      city: Königsberg, DE
#+END_EXAMPLE

Using pandoc, you can then convert this into a variety of formats,
including HTML and PDF. The key is to create a template for every output
format that you need. For example, you might template your employment
history like so:

#+BEGIN_EXAMPLE
    $for(experience)$
      $experience.years$\\
      \textsc{$experience.employer$}\\
      \emph{$experience.job$}\\
      $experience.city$\\[.2cm]
    $endfor$
#+END_EXAMPLE

Pandoc then feeds the YAML info to LaTeX for PDF typesetting. You can
see a sample [[file:materials/images/preview.jpg][here]].

With this method, you can keep your entire CV in a single YAML file and
easily generate a PDF, HTML, or some other format. For the full set of
templates for LaTeX and HTML, along with a =makefile= for easy
conversion, you can look at
[[https://github.com/mclearc/cv-boilerplate.git][my repo]] on Github.


*** DONE New Site Design :website:bootstrap:pelican:
:PROPERTIES:
:EXPORT_DATE: 2015-07-13
:EXPORT_FILE_NAME: newsite
:END:
I've updated the website with (what I hope is) a cleaner look and a bit better
navigation. Thanks go to [[https://github.com/DandyDev][DandyDev]] for developing a great [[https://github.com/DandyDev/pelican-bootstrap3][bootstrap theme]] for
[[http://blog.getpelican.com][Pelican]]. I'll be continuing to tweak here and there so apologies if you find
broken links or other infelicities.

*** DONE Pandoc Letters :pandoc:latex:
:PROPERTIES:
:EXPORT_DATE: 2015-07-22
:EXPORT_FILE_NAME: pandocletter
:END:
I had to write a recommendation letter today and thought I'd use it as an
excuse to write up a Pandoc template for Pandoc-LaTeX conversion. It generates
a nice looking letter with letterhead (assuming you have a logo for it). It
uses the [[https://www.ctan.org/pkg/newlfm?lang=en][newlfm package]]. The template is on github [[https://raw.githubusercontent.com/mclearc/pandoc-templates/master/letter.tex][here]]. I got the idea from
Matthew Miller's [[http://www.matthewjmiller.net/howtos/customized-cover-letter-scripts/][post]], and [[http://texblog.org/2013/11/11/latexs-alternative-letter-class-newlfm/][this discussion]] on [[http://texblog.org][texblog.org]].

*** DONE Site Changes :website:
:PROPERTIES:
:EXPORT_DATE: 2016-05-28
:EXPORT_FILE_NAME: sitechanges
:END:
I'm making some changes to the website over the next couple weeks. I'm moving
all the teaching materials to their own websites (e.g.
[[http://phil105.colinmclear.net][phil105.colinmclear.net]]). So please excuse any broken links you find in the
meantime!

*** DONE Text Editors and Academic Writing :writing:
:PROPERTIES:
:EXPORT_DATE: 2016-09-05
:EXPORT_FILE_NAME: texteditor
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /2016/text-editors-and-academic-writing :type post :toc false
:END:

Tools for writing using a computer fall into two broad camps. On the one side
we have [[https://en.wikipedia.org/wiki/WYSIWYG][WYSIWIG]] word processing applications like Microsoft Word, Apple Pages,
and Google Docs. They allow not only the typing of text but also real-time
formatting and display. These applications are familiar to most, and are the
dominant ones used in higher-ed today. They also tend to be expensive (or
available only to those with institutional affiliation), suffer from issues of
feature-bloat and unnecessary make-overs, and use proprietary
non-human-readable file formats.

In contrast to the WYSIWIG editors stands the [[https://en.wikipedia.org/wiki/Text_editor][text editor]]. It operates on
plain text, human readable, files. And its main purpose is to parse text in
the most efficient way possible. It does not (typically) display a page as it
will look when printed. There are many, many text editors one can choose from
them, and the two most well-known---[[https://www.gnu.org/software/emacs/][emacs]] and [[http://www.vim.org][vim]]---are free.

As far as I can tell there are basically three main reasons to prefer a
text editor over a word processing application.

- Text editors are more efficient at editing text
- Text editors connect better with other research and writing tools
- Text editors are easier to enjoy working in/with

I'm not sure that I find any of these or the [[https://www.google.com/search?q=writing+in+plain+text][many other various arguments]] for
writing in plain text with a text editor totally convincing, at least in
isolation. Certainly there is no one-size-fits-all answer. If you like writing
in MS Word or Apple Pages, if such programs help you get on with writing, then
great.

That said, there are some really useful things that you can do when writing in
plain text and using a powerful (and often free) text editor, or command line
tools made for manipulating text (like [[https://en.wikipedia.org/wiki/Cat_(Unix)][cat]], [[https://en.wikipedia.org/wiki/Grep][grep]] or [[https://en.wikipedia.org/wiki/Sed][sed]]). Here are a few
reasons that I find compelling. I'm sure there are others.

1. Search

   Whether searching in a single file or across files, when writing in plain
   text it is really quite simple to perform searches looking for a particular
   word or combination of words. If you know the syntax for writing [[https://en.wikipedia.org/wiki/Regular_expression][regular
   expressions]] the process is even easier. For example, from a directory of
   notes I can search for the occurrence of particular words or phrases and
   then move to each occurrence (even if they are in separate files)
   seamlessly, all using just a text editor ([[https://www.gnu.org/software/emacs/][emacs]]) and a simple search
   command (in this case using emacs to [[https://github.com/Wilfred/ag.el][interface]] with a search program called
   the [[https://github.com/ggreer/the_silver_searcher][silver searcher]] or "ag").

2. Version control

   I've [[file:%7Bfilename%7D/blog/VersionControl.md][written before]]
   about how useful it is to have your writing under some sort of
   version control. Most modern text editors allow you to directly and
   easily interface with the vc of your choice in the course of an
   editing session. In the case of emacs there is the incomparable
   [[https://github.com/magit/magit][Magit]].

3. Outlining & Notetaking

   Since their main use is manipulating text, text editors are unsurprisingly
   great for outlining and notetakeing. For example, Vim has a great outlining
   tool called [[http://www.vim.org/scripts/script.php?script_id=2657][Voom]] and emacs has the incomparable [[http://orgmode.org][org-mode]]. You can even use
   org-mode for keeping a [[http://stackoverflow.com/questions/26669280/setup-a-personal-wiki-in-emacs-org-mode][research wiki]] if that's you're thing. You can see a
   historian making use of vim's notetaking powers [[http://wcm1.web.rice.edu/plain-text-citations.html][here]].

4. Flexibility

   Do you spend a lot of time on your computer at night and wish MS Word
   wasn't such a blaringly bright white application to work with? Do you wish
   you could automate or create keyboard shortcuts for repetitive tasks during
   editing? At least with the three major open source editors---[[https://www.gnu.org/software/emacs/][emacs]], [[http://www.vim.org][vim]],
   and [[https://atom.io][atom]]---this is relatively easy to do (or to learn to do). You can
   change how your editor looks, what kind of keyboard combinations do what,
   and automate simple (or even [[http://cestlaz.github.io/posts/using-emacs-15-macros/#.V8sXlTuMCYU][complex]]) tasks.

5. Interface with other programs

   Though this connects with the second bullet point above, it is useful to
   emphasize. For example, I use [[http://pandoc.org/MANUAL.html][pandoc]] for converting all my academic writing
   and teaching materials. I also keep all my bibliographic material in a
   [[http://www.bibtex.org][bibtex]] document. My text editor has plug-ins which allow me to seamlessly
   interact with these programs and others, without having to leave the
   editor. I'm also able to do all the upkeep for my various websites within
   the editor. I've found this kind of uniform interface for everything to be
   extremely useful.

So try a text editor (or two or three) and see what you think (but really, use
[[https://www.gnu.org/software/emacs/][emacs]]). Write your next paper in it (or at least the notes for it) and see if
you find it helpful. There is always a [[http://www.terminally-incoherent.com/blog/wp-content/uploads/2006/08/curves.jpg][learning curve]] to take into account.
But after you get the hang of a particular editor you can decide whether it is
really a help or if you'd rather just chuck it and go back to MS Word, Pages,
or [[https://www.literatureandlatte.com/scrivener.php][whatever worked for you]] before.


*** DONE Version Control and Academic Writing :workflows:geekery:writing:git:
:PROPERTIES:
:EXPORT_DATE: 2015-07-17
:EXPORT_FILE_NAME: versioncontrol
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /2015/version-control-and-academic-writing :type post :toc false
:END:

Academic writing typically requires writing something in drafts. Many drafts.
Until recently there have been few ways of elegantly handling this. Often, one
would need to title the current draft with the day's date, then save this
draft in a folder (named, e.g., "drafts" or "versions"), and do this every
time one sits down to write. This works, in some ways. The data is there. The
problem is that you quickly end up with a folder (or desktop's) worth of
files. These filenames have typically ridiculous and increasingly obscure
titles (e.g. final-draft-final-revision\final-draft-04-2018.docx). And it
is seldom clear, using this method, exactly what one did when, without
actually opening a particular file and looking, or trying to remember when
(and where) it was that one made the relevant change.

Nowadays, especially if you use some sort of cloud-based word-processor, it's
likely that you have access to various ways of looking at your version
history. For example, Google docs has a [[https://support.google.com/docs/answer/190843?hl=en][revision history]] option (something
similar exists for [[http://www.macinstruct.com/node/516][Dropbox]], which lets you easily move back and forth among
different versions. Revision histories of this kind offer a way to
automatically back up one's writing. This is especially helpful if you're not
the type of person to carefully name each day's writing with a new time/date
stamp and save them all in the appropriate folder. There are also service (as
opposed to application) specific ways of tracking changes to a file. At least
[[http://versionrocket.com][some]] of [[http://versionrocket.com][them]] allow you to compare differences between versions of files. But
at least two things are missing. First, there is no straightforward way of
seeing what has changed where, and to see this at arbitrary levels of
granularity. Second, in order to see what's changed when, you have to look in
the document itself. There is no general log of the changes you've made to the
file.

Here's what I have in mind:

#+CAPTION: Change Log
[[file:/materials/images/ScreenShot52964.png]]

You see here a series of entries going back over two years, with a description
of what I took to be the most important changes at the time. I can then open
any one of the those entries and see a more detailed, line by line,
description of changes. This is called a "diff". I can also roll back the
version of the file I'm working on to any of these changes. Each "commit" is a
snapshot of the relevant files at the time, which I can retrieve at any point.

I think this is a really nice way to track and visualize one's progress on
some piece of writing. This is hard to do with standard word processors and
their means of versioning, but very straightforward to do with a more
sophisticated kind of [[https://en.wikipedia.org/wiki/Revision_control][version control system]]. A version control system can
manage changes to a file at an extremely fine level of grain--down to a line
or character if necessary. While this system was originally adopted by
programmers, it can also be very useful in academic writing (or really any
writing where multiple drafts are created).

This form of version control pictured above depends on a system called
[[https://git-scm.com][Git]].[fn:1] There are lots of [[http://rogerdudler.github.io/git-guide/][tutorials]] and [[https://www.atlassian.com/git/][other resources]] for using Git.
Though Git is often used from the command line there are also some [[http://gitup.co][great]] free
[[https://www.sourcetreeapp.com][graphical interfaces]] for Git. There are also a lot of helpful [[http://writers.stackexchange.com/questions/10440/what-is-the-purpose-of-version-control/10443#10443][discussions]]
online concerning writing while using a version control system like Git.

The basic idea is that, using whatever writing application one likes,
one tracks changes to a document, or a whole directory of documents
(e.g. adding image files for presentations, or additional parts of a
document kept in separate files when writing longer works like a thesis
or novel). The changes can be tracked at an arbitrary level of grain--to
the sentence, word, or character--and different versions can be easily
compared. All of this can be done without generating lots of files with
different numbers or date/time stamps. Everything is kept in a database
that one can easily interact with using either the command line or some
form of graphical interface.

So far, this isn't necessarily any different from what one can do using
Word or Google Docs. One additional benefit of using a version control
system is that one can easily label and describe batches of changes
(e.g. revisions to a particular section of a paper or chapter) and keep
a single record of these changes. Then, if one want to look back at
one's progress, or for a specific change that one made, all one need do
is look at the single general document listing the changes. You can even
do this in the text editor of your choice (e.g. vim or sublime text)

For example, here's a sample log of the changes made to a paper I've been
working on, using a vim plugin called "[[https://github.com/gregsexton/gitv][gitv]]", which depends on Tim Pope's
[[https://github.com/tpope/vim-fugitive][fugitive]] plugin ([[https://sublimegit.net][SublimeGit]] is an equally excellent sublime text plugin).

[[file:/materials/images/ScreenShot56089.png]]

On the left is the git log of changes. On the right is a more detailed
description of what changed--what was added, deleted, or moved.

**** Using Git

The basic workflow for using Git is as follows. In the directory you're
keeping your project in (you do keep this in a directory and not just on
your desktop right?) you need to create a Git repository. This means
typing =git init= on the command line from the directory, or doing so
via whatever GUI app you've picked. You only have to do this once per
writing project. So that's:

- =cd \path\to\repository=
- =git init=
- =git add filename.file=
- =git commit=

  - write commit message
  - write and quit file

Once you've got your repository (or "repo") you need to add files for
tracking. Just type =git add= and the name of the file you're tracking.
Then type =git commit=. You'll then type a commit message to go along
with the commit--e.g. "first commit". Write and quit, or press commit in
whatever application you're using. At this point you've got a
functioning version control system. So your workflow should be something
like the following:

- Write
- Add/stage changes
- Write commit message and commit

There's a lot to Git that I can't cover here. It can be very helpful when
experimenting with an idea. It's also a nice way to think about and track your
work over time. One downside of using a system like git is that it doesn't
work well with Microsoft Word or other rich text WYSIWIG text editors. But
there are ways [[http://blog.martinfenner.org/2014/08/25/using-microsoft-word-with-git/][around]] [[https://www.martineve.com/2013/08/18/using-git-in-my-writing-workflow/][this]].

If you like the idea of git, commit messages, and a readable log of changes
you've made to a file, but don't want to deal with the more technical aspects
of setting up git and using it, there are also great web apps like [[https://www.penflip.com][Penflip]],
which streamline much of the process.

[fn:1] You might also look at [[https://mercurial.selenic.com][Mercurial]], which is a popular, and perhaps
       slightly easier to use, alternative to Git.
*** DONE Writing a syllabus for multiple formats :workflows:teaching:
:PROPERTIES:
:EXPORT_DATE: 2016-07-17
:EXPORT_FILE_NAME: syllabus_yaml
:END:

I find it generally preferable to keep information I use for teaching in a
format that allows for different styles of presentation. I've written [[http://colinmclear.net/2015/maintaining-a-cv-in-multiple-formats][before]]
about how one might keep a CV in a yaml document that outputs to a variety of
different possible formats using [[http://pandoc.org/README.html][pandoc]]. I also use a similar system for
syllabi.

The basic idea is to keep your syllabus in a yaml file and export it to html,
pdf, or rtf using a makefile. The nice thing about this is that you can, e.g.,
hand out a nicely formatted PDF (or printout) of your syllabus at the
beginning of the semester, and then keep a continually updated version on your
course website as HTML, all without having to have multiple documents that
you're editing. You can find the basic template on [[https://github.com/mclear-teaching-projects/syllabus_template][Github]] and an example from
my [[http://phil101.colinmclear.net][PHIL 101 class]], also on [[https://github.com/mclear-teaching-projects/phil101/tree/master/Syllabus_Intro][Github]].

The html and latex templates are pretty basic, but serviceable. You should be
able to easily modify them to fit your particular needs. 
*** DONE Teaching Notes, Slides, & Handouts
CLOSED: [2021-10-15 Fri 22:50]
:PROPERTIES:
:EXPORT_FILE_NAME: teaching-notes
:EXPORT_DATE: 2021-10-15
:END:

I've recently created some functions in emacs to make exporting notes, slides, and
handouts somewhat easier. I do all this using [[https://orgmode.org][org-mode]]. I figure there are at least a
few other people who might find this workflow of interest so I though I would
document it here (it will also serve as a document of how all this works in case I
forget in the future).

**** Notes
Basically, I want to be able to export from a file or an org-mode tree in a few
different ways. First, I might want to export from my org files a set of notes that
I'll use during lecture and share with students. I use [[https://github.com/org-roam/org-roam][org-roam]] to keep all my notes
and I have some custom functions (adapted from [[https://github.com/minad/consult/wiki/hrm-notes][here]]) to search them. I'll put all
these together in an org file using the =#+INCLUDE:= directive (see [[https://orgmode.org/manual/Include-Files.html][here]]). This lets me
collect notes from a bunch of different places into one set. I can select specific
files, specific headings, even specific lines. I'll then export using one of the
following functions (depending on context):

#+begin_src emacs-lisp
  (defun cpm/org-export-pdf-notes ()
  "Export subtree of notes to PDF file. Note uses a distinctive quote style."
  (interactive)
  (let ((org-latex-default-quote-environment "quote-b"))
    (org-narrow-to-subtree)
    (save-excursion
      (goto-char (point-min))
      (org-latex-export-to-pdf t t nil nil '(:latex-class "org-notes")))
    (widen)))

(defun cpm/org-export--file-pdf-notes ()
  "Export file notes to PDF file. Note uses a distinctive quote style."
  (interactive)
  (let ((org-latex-default-quote-environment "quote-b"))
    (save-excursion
      (goto-char (point-min))
      (org-latex-export-to-pdf t nil nil nil '(:latex-class "org-notes")))))
#+end_src

These functions require that you create the following custom [[http://doc.endlessparentheses.com/Var/org-latex-classes.html][org-latex class]]:

#+begin_src emacs-lisp
  ;; Export org to a nice looking PDF file
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("org-notes"
                 "\\documentclass[12pt]{article}
                  [NO-DEFAULT-PACKAGES]
                  [EXTRA]
                  \\input{/Users/roambot/.emacs.d/.local/custom-org-latex-classes/notes-setup-file.tex}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

This runs an asynchronous process to produce a nice looking PDF of the relevant
notes. This does also require a specific set of latex packages that I set in another
file I call "notes-setup-file.tex". I'll put that at the end of the post. 

**** Slides & Handouts

The other thing I often need to do is create slides for a lecture or talk, as well as
a handout. I like beamer with a custom version of the [[https://github.com/matze/mtheme][Metropolis]] theme. I don't want
to have to create separate files for the slides and for the handout. I also don't
want to just give a handout that is a set of pictures of the slides. Terrible! So
here's what I do instead.

First, I have a set of custom classes:

#+begin_src emacs-lisp
  ;; Presentation slides (with notes)
  (with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("beamer-presentation"
                 "\\documentclass[presentation]{beamer}
                  [NO-DEFAULT-PACKAGES]
                  [PACKAGES]
                  \\usepackage{pgfpages}
                  [EXTRA]
                  \\setbeameroption{show notes on second screen=right}
                  \\setbeamertemplate{note page}{\\pagecolor{yellow!5}\\insertnote}
                  \\input{/Users/roambot/.emacs.d/.local/custom-org-latex-classes/unl-beamer-preamble.tex}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))


  ;; Making handouts for slides that don't just look like slides
  (with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("beamer-handout"
                 "\\documentclass[12pt]{article}
                  [NO-DEFAULT-PACKAGES]
                  [EXTRA]
                  \\input{/Users/roambot/.emacs.d/.local/custom-org-latex-classes/handout-setup-file.tex}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

Note that these classes uses a set of custom setup files for the latex packages,
including a custom quote environment ("quote-b") to show quoted passages with a
left-side bar and with a slightly shaded background.

I also like to have the slides be primarily texts or main ideas, while my notes are
in a separate area, which will show up on the handout but not the slides. I use a src
enviroment called "notes" for this and the following code for filtering everything
correctly on export.

#+begin_src emacs-lisp
;; Originally used for exporting notes in reveal.js
  ;; See
  ;; https://joonro.github.io/Org-Coursepack/Lectures/04%20Creating%20Content%20for%20Slides%20and%20Handouts.html#speaker-notes
  (defun string/starts-with (string prefix)
    "Return t if STRING starts with prefix."
    (and (string-match (rx-to-string `(: bos ,prefix) t) string) t))

  (defun my/process-NOTES-blocks (text backend info)
    "Filter NOTES special blocks in export."
    (cond
     ((eq backend 'rst)
      (if (string/starts-with text ".. NOTES::") ""))
     ((eq backend 'html)
      (if (string/starts-with text "<div class=\"NOTES\">") ""))
     ((eq backend 'beamer)
      (let ((text (replace-regexp-in-string "\\\\begin{NOTES}" "\\\\note{" text)))
        (replace-regexp-in-string "\\\\end{NOTES}" "}" text)))
     ))

  (eval-after-load 'ox '(add-to-list
                         'org-export-filter-special-block-functions
                         'my/process-NOTES-blocks))
#+end_src

Then I have a set of functions for exporting the relevant files asynchronously.

#+begin_src emacs-lisp
  ;;;; Org export to slides w/notes
  (defun cpm/org-export-beamer-presentation ()
    (interactive)
    (let ((org-export-exclude-tags '("handout")))
      (save-excursion
        (goto-char (point-min))
        (org-beamer-export-to-pdf nil t nil nil '(:latex-class "beamer-presentation")))))

  ;; I got the tag based selective export idea from J Kitchin
  ;; https://kitchingroup.cheme.cmu.edu/blog/2013/12/08/Selectively-exporting-headlines-in-org-mode/
  (defun cpm/org-export--file-beamer-presentation ()
    (interactive)
    (let ((org-export-exclude-tags '("handout")))
      (save-excursion
        (goto-char (point-min))
        (org-beamer-export-to-pdf t nil nil nil '(:latex-class "beamer-presentation")))))
  

  ;;;; Org export file to handout
  (defun cpm/org-export-beamer-handout ()
  "Export subtree content to PDF handout. Handout uses a distinctive quote style."
  (interactive)
  (let ((org-latex-default-quote-environment "quote-b")
        (org-export-exclude-tags '("slides")))
    (org-narrow-to-subtree)
    (save-excursion
      (goto-char (point-min))
      (org-latex-export-to-pdf t t nil nil '(:latex-class "beamer-handout")))
    (widen)))

(defun cpm/org-export--file-beamer-handout ()
  "Export file content to PDF handout. Handout uses a distinctive quote style."
  (interactive)
  (let ((org-latex-default-quote-environment "quote-b")
        (org-export-exclude-tags '("slides")))
    (save-excursion
      (goto-char (point-min))
      (org-latex-export-to-pdf t nil nil nil '(:latex-class "beamer-handout")))))
#+end_src

The nice thing about this is I can use a single file and export a nice looking set of
slides and a good handout, where the handout can also include extra notes or passages
via the tag filter on export. 

For a look at the org-latex-classes you can check out the [[https://github.com/mclearc/org-latex-classes][github repository]]. You can
also look at the above functions as they appear in my [[https://github.com/mclear-tools/dotemacs/blob/master/setup-config/setup-teaching.el][dotfiles]].

*** DRAFT On Citations :research:notes:writing:
:PROPERTIES:
:EXPORT_DATE: 2016-10-11
:EXPORT_FILE_NAME: citations
:END:

*** DRAFT Reference Management :references:writing:
:PROPERTIES:
:EXPORT_DATE: 2015-08-05
:EXPORT_FILE_NAME: reference-management
:END:
There are two things I wish I had better habits for in grad
school---note taking, and managing references. I'll touch on them both
here, but I'm mainly going to focus on managing references.

I read a lot, and I skim even more. I want a tool that will help me do
three things. First, I want to be able to keep track of what I'm
reading, preferably across multiple devices (e.g. a tablet and a laptop).
This is easy if you read one thing at a time, and never start reading
anything else until you've finished the previous item. But I don't work
that way---perhaps the Internet has caused my short attention span. I'm
usually reading several things at once, and I often circle back around to
one thing after I've started something else.

Second, I want to be able to keep track of notes concerning what I'm reading. This is
easily done in the margins of a book (if you're not working electronically, as I
almost always am) or in a notebook. But these are data silos. I want something that I
can easily get data out of later.

Third, I want to be able to easily cite what I've read in my writing.
So, I want three things---reading, annotation, and citation management.

*** DRAFT Taking Notes :research:notes:writing:
:PROPERTIES:
:EXPORT_FILE_NAME: taking-notes
:END:


*** DRAFT Reading Efficiently
See http://karinwulf.com/efficient-reading/

*** DRAFT What to Read as a Graduate Student

*** DONE Emacs Configurations :emacs:geekery:
CLOSED: [2019-10-22 Tue 20:26]
:PROPERTIES:
:EXPORT_DATE: 2019-10-22
:EXPORT_FILE_NAME: emacs-configuration
:END:
I spend a lot of time writing and editing. I use a [[https://en.wikipedia.org/wiki/Text_editor][text editor]] for this. I've [[https://www.colinmclear.net/posts/texteditor/][written
before]] on why I think text editors are the best means for writing and editing one can
have. But part of why a text editor can be so important is that they tend to be
extensible or configurable (or both)---you can fit the editor to your needs. I use
[[https://www.gnu.org/s/emacs/][emacs]], which is perhaps the most configurable and extensible text editor there is.

But the configurability and extensibility can also cause frustration. Many people
don't want to think about configuring emacs. For such folks I strongly recommend the
configurations of [[https://github.com/purcell/emacs.d][purcell]] and [[https://github.com/bbatsov/prelude][batsov (prelude)]] and [[https://github.com/caisah/emacs.dz][many others]]. I come originally
from using [[https://www.vim.org][vim]]. If you prefer vim's [[https://en.wikipedia.org/wiki/Vi#Interface][modal editing]] style you should try [[http://spacemacs.org][spacemacs]] or
[[https://github.com/hlissner/doom-emacs][doom-emacs]] as a way of managing your configuration. Whatever you choose you should
look at some [[https://github.com/hrs/sensible-defaults.el][sensible defaults]] for configuring emacs.

I started using emacs via spacemacs about three years ago and fairly quickly migrated
to developing [[https://github.com/mclear-tools/dotemacs][my own config]]. There tend to be [[https://emacs.stackexchange.com/questions/2520/organize-the-content-of-emacs-d-init-el-and-emacs-d][three styles of config]]: a [[http://milkbox.net/note/single-file-master-emacs-configuration/][single
=init.el=]] file with all the elisp necessary to run emacs as you like it; a [[https://harryrschwartz.com/2016/02/15/switching-to-a-literate-emacs-configuration]["literate"
config]] using [[http://orgmode.org][org-mode]] to organize and then "tangle" the file using [[http://orgmode.org/worg/org-contrib/babel/][org-babel]] (you can
find another helpful discussion of this method [[http://stackoverflow.com/questions/17416738/emacs-initialization-as-org-file-how-can-i-get-the-right-version-of-org-mode][here]]); or a [[http://ergoemacs.org/emacs/organize_your_dot_emacs.html]["modular" file]] in which
the =init.el= file loads separate "libraries" of code.

For configurations of any reasonable level of complexity I think the single file
approach is ill-conceived. 

The literate config using org is great for two reasons. First, it is extremely simple
to organize one's config and comment significantly on every part. This is especially
helpful when one is just starting out with elisp so that one can verbosely comment on
how the various elisp code one uses works to achieve the desired results. Second,
literate configs can be great learning sources for others. If you use a code
repository like Github then you can display the org file natively. This makes
browsing someone's emacs config very easy (especially when they include a [[https://github.com/mclear-tools/dotemacs/blob/master/config.org#table-of-contents][table of
contents]]).

But a literate config can have its [[https://valignatev.com/posts/emacs-org-config/][down sides]]. In addition to the issues discussed in
that link, some of which may be resolvable, I found a few key problems. First, if you
like to run the latest org-mode then you have to work around emacs' built-in org
version, which can be a [[https://www.reddit.com/r/emacs/comments/5sx7j0/how_do_i_get_usepackage_to_ignore_the_bundled/][pain in the neck]].

Second, you need to load org mode when you generate, or want to edit, your config
file. This can lead to slower load times in general, and if you have a large config,
it can take several seconds before you can start editing (some people might not mind
this but it tends to annoy me). I also think that, beyond the issue with start-up times,
the fact that someone new to emacs would have to add a further layer of abstraction
(i.e. org-mode and babel) to generate their init.file might be confusing. 

Third, I find it a bit easier to keep modular files (e.g. separate files for
keybindings, for configuring specific packages, or for a theme, etc.) under version
control than to keep a single monolithic configuration file under vc. 

Fourth, I often accidentally deleted or moved parts of my org config unintentionally,
due to editing when at least some headlines were collapsed. There are [[https://emacs.stackexchange.com/questions/2086/org-mode-prevent-editing-of-text-within-collapsed-subtree][ways to avoid
this]], but it leads to some unnecessary problems.

Fifth, and perhaps more subjectively than the above, I find it much easier to wrap my
head around separate modules when it comes to thinking about what I want to tweak or
change, or looking at a git log of what I have tweaked or changed. 

Sixth, dealing with problems (debugging) is harder. Often you'll need to use the
tangled source for debugging and then go back and make changes in the org mode file.
Also, the links from *Help* and *Debugger* will jump to the tangled source rather than
the org file, which is what you actually need to edit. Also, if there are problems
you might need to bisect your org file (essentially commenting out parts of it until
you figure out what is wrong). I find it much easier to simply load or not load
specific modules from the init file. 

Seventh, it is also easier to edit files in lisp mode than edit an org mode
containing lisp syntax. 

Now, a modular config is perhaps not as immediately readable as a literate one, but
it /is/ easy to comment as necessary on one's code, and you can use packages like
[[https://github.com/alphapapa/outshine][Outshine]] to provide all the folding and navigational ease of org in pure elisp. I
also use a [[https://github.com/mclear-tools/dotemacs/blob/8f96e3e7d2878376bd0ab323f765786ab4b886f7/init.el#L273-L281][few custom functions]] for navigating my setup files, which makes things at
least as easy to find as they were in my old literate config (in some ways I find my
current modular config even easier to search through). 


* Configuration
#+HUGO_BASE_DIR: ./ 
#+OPTIONS: H:4 author:nil date:nil
#+OPTIONS: prop:t broken-links:t
#+OPTIONS: ':t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport archive nohugo
#+TODO: DRAFT | DONE CANCELED
#+TODO: TODO | DONE CANCELED
#+LANGUAGE: en
#+PANDOC_METADATA: numbersections:t secnumdepth:4 
#+PANDOC_METADATA: link-citations:t colorlinks:t toc:false 
#+PANDOC_METADATA: "lhead:"
#+PANDOC_METADATA: "mainfont:Optima"
#+PANDOC_METADATA: spacing:singlespacing 
#+PANDOC_METADATA: noindent: parskip:.85em
#+PANDOC_OPTIONS: template:~/.pandoc/pandoc-templates/tufteII.tex
#+PANDOC_OPTIONS: standalone:t pdf-engine:xelatex  
#+BIBLIOGRAPHY: ~/Dropbox/Work/Master.bib

* COMMENT Local Variables :ARCHIVE:
# Local Variables:
# eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
# eval: (setq org-export-initial-scope 'subtree)
# End:

